# -*- python -*-
# ex: set syntax=python:

http_proxy = "http://localhost:8123/"

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("localhost", "herrewed4")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import AnyBranchScheduler
from buildbot.scheduler import Dependent


# this scheduler watches the repo for changes
# only put dev servers in here as they will be run each time a new change
s_oserverdev = AnyBranchScheduler(name="oserver-dev",
                                branches=None,
                                treeStableTimer=0,
                                builderNames=["oserver-dev"])

# Dependent scheduler will build after upstream success. good for staging builds after dev
s_oserverstaging = Dependent(name="oserver-staging",
                                upstream=s_oserverdev,
                                builderNames=["oserver-staging"])
                                
c['schedulers'] = [s_oserverdev, s_oserverstaging]

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.



from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.process.properties import WithProperties
from buildbot.steps.python_twisted import Trial

# steps common to all builds

# run the post download hook script
step_deploy = ShellCommand(command=['python', "deploy/deploy.py"], description=["deploying"], descriptionDone=['deployed'])

# oserver
gitrepourl_oserver = "git@github.com:oppian/oserver.git"

# define clean builder
bf_oserver_clean = factory.BuildFactory()
# its clean because mode=copy which means copy the source repo for a clean build, but be bandwith efficient with checkouts
bf_oserver_clean.addStep(Git(repourl=gitrepourl_oserver, mode="copy", submodules=True, retry=(10, 10)))
bf_oserver_clean.addStep(step_deploy)

# define update builder
bf_oserver_update = factory.BuildFactory()
# mode=update 
bf_oserver_update.addStep(Git(repourl=gitrepourl_oserver, mode="update", submodules=True, retry=(10, 10)))
bf_oserver_update.addStep(step_deploy)

b_oserverprod = {'name': "oserver-prod",
      'slavename': "localhost",
      'builddir': "oserver-prod",
      'factory': bf_oserver_update,
      'env':{
           'BUILD_TYPE':'prod',
           'DB_SETUP':'False',
           'DB_NAME':'oppster',
           'DB_USER':'oppster',
           'DB_PASS':'mented73',
           'DB_HOST':'localhost',
           'DB_MIGRATE':'True',
           'SITE_DOMAIN':'oppster.oppian.com',
           'DEBUG':'False',
           'APACHE_USER':'www-data',
           'APACHE_CONF':'oserver',
           'CRON_FILE':'oserver',
           'http_proxy':http_proxy,
           },
      }

b_oserverstaging = {'name': "oserver-staging",
      'slavename': "localhost",
      'builddir': "oserver-staging",
      'factory': bf_oserver_clean,
      'env':{
           'DB_SETUP':'True',
           'DB_NAME':'oserverstaging',
           'DB_USER':'oserverstaging',
           'DB_PASS':'mereens25',
           'DB_HOST':'localhost',
           'DB_COPY':'True',
           'DB_COPY_NAME':b_oserverprod['env']['DB_NAME'],
           'DB_COPY_USER':b_oserverprod['env']['DB_USER'],
           'DB_COPY_PASS':b_oserverprod['env']['DB_PASS'],
           'DB_COPY_HOST':b_oserverprod['env']['DB_HOST'],
           'DB_MIGRATE':'True',
           'COPY_SITE_MEDIA':'../../%s/build/site_media' % b_oserverprod['builddir'],
           'SITE_DOMAIN':'oppster-staging.oppian.com',
           'DEBUG':'False',
           'APACHE_USER':'www-data',
           'APACHE_CONF':'oserverstaging',
           'CRON_FILE':'oserverstaging',
           'http_proxy':http_proxy,
           },
      }

b_oserverdev = {'name': "oserver-dev",
      'slavename': "localhost",
      'builddir': "oserver-dev",
      'factory': bf_oserver_clean,
      'env':{
           'BUILD_TYPE':'dev',
           'DB_SETUP':'True',
           'DB_NAME':'oserverdev',
           'DB_USER':'oserver',
           'DB_PASS':'enexpert42',
           'DB_HOST':'localhost',
           'SITE_DOMAIN':'oppster-dev.oppian.com',
           'DEBUG':'True',
           'FIXTURE_FILE':'testdata',
           'APACHE_USER':'www-data',
           'APACHE_CONF':'oserverdev',
           'CRON_FILE':'oserverdev',
           'http_proxy':http_proxy,
           },
      }

# add builders
c['builders'] = [b_oserverprod, b_oserverstaging, b_oserverdev]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@oppian.com",
                                     extraRecipients=["build@oppian.com"],
                                     sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "oserver"
c['projectURL'] = "https://github.com/oppian/oserver"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.oppian.com/"
